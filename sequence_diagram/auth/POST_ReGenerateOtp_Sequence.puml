@startuml ReGenerateOtp (POST)

footer Page %page% of %lastpage%
title "ReGenerateOtp (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:auth" as AuthRouter
participant "<<controllers>>\n:auth" as AuthController
participant "<<model>>\n:User" as UserModel
participant "<<model>>\n:OtpSession" as OtpSessionModel
participant "SMTP" as SMTP

database "<<MongoDB>>\n:user" as UserDatabase
database "<<MongoDB>>\n:otpSession" as OtpSessionDatabase

client->server ++:req.post('/auth/regenerate-otp')
server->AuthRouter ++:app.use('/auth/regenerate-otp',reGenerateOtp)
AuthRouter -> AuthController ++: reGenerateOtp()
alt if (!req.session.userId)
AuthController-->client --:response(401)
else

AuthController->UserModel ++: User.find(id:req.session.userId)
UserModel ->UserDatabase ++: UserSchema
UserDatabase --> UserModel --: user
AuthController <-- UserModel --:user
alt if (!user)
AuthController-->client --:response(400)
else
AuthController->AuthController : isMatch = user.matchPassword(req.body.password)
alt if (!isMatch)
AuthController-->client --:response(400)
else
AuthController->AuthController : generateOtpAndRef()
AuthController->OtpSessionModel : OtpSession.upsert()
note over OtpSessionModel
code from code from generateOtpAndRef
ref from ref from generateOtpAndRef
user from req.user.id
end note
OtpSessionModel ->OtpSessionDatabase ++: OtpSessionSchema
OtpSessionDatabase --> OtpSessionModel --: otpSession
AuthController <-- OtpSessionModel --:otpSession
AuthController -->SMTP : send mail with otp_code and ref
AuthController->AuthController : setSession()
note over AuthController
set req.session.userId = user._id;
set req.session.ref = otpRef;
end note
AuthController-->client --:response(200)
end
end
end



@enduml
